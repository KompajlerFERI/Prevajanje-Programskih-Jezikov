FIRST AND FOLLOW za LL(1)



FIRST(Main_Program) = FIRST(Main_Program’’) ∪ FIRST(Main_Program’)
                    = {const, type_number, type_string, type_coordinate, type_list, variable, city}

FIRST(Main_Program’) = FIRST(FIRST(Main_Program) ° FIRST(Main_Program’)) ∪ FIRST(ε)
                     = {const, type_number, type_string, type_coordinate, type_list, variable, city} ∪ {ε}

FIRST(Main_Program’’) = FIRST(Declaration) ∪ FIRST(Assignment) ∪ FIRST(City)
                      = {const, type_number, type_string, type_coordinate, type_list} ∪ {variable} ∪ {city}

FIRST(Declaration) = FIRST(const Declaration’) ∪ FIRST(Declaration’)
                   = {const} ∪ {type_number, type_string, type_coordinate, type_list}

FIRST(Declaration’) = FIRST(FIRST(Type) ° FIRST(variable) ° FIRST(equals) ° FIRST(Expression)) 
                    = {type_number} ∪ {type_string} ∪ {type_coordinate} ∪ {type_list}

FIRST(Assignment) = FIRST(FIRST(variable) ° FIRST(equals) ° FIRST(Expression)) 
                  = {variable}

FIRST(Type) = FIRST(type_number) ∪ FIRST(type_string) ∪ FIRST(type_coordinate) ∪ FIRST(type_list lthen Type mthen)
            = {type_number} ∪ {type_string} ∪ {type_coordinate} ∪ {type_list}

FIRST(Expression) = FIRST(Additive)
                  = {plus, minus, real, variable, lbracket, lsq_bracket}

FIRST(Additive) = FIRST(FIRST(Multiplicative) ° FIRST(Additive’))
                = {plus, minus, real, variable, lbracket, lsq_bracket}

FIRST(Additive’) = FIRST(plus Multiplicative Additive’) ∪ FIRST(minus Multiplicative Additive’) ∪ FIRST(ε)
                 = {plus} ∪ {minus} ∪ {ε}

FIRST(Multiplicative) = FIRST(FIRST(Exponential) ° FIRST(Multiplicative’))
                      = {plus, minus, real, variable, lbracket, lsq_bracket}

FIRST(Multiplicative’) = FIRST(times Exponential Multiplicative’) ∪ FIRST(divide Exponential Multiplicative’) ∪ FIRST(integer-divide Exponential Multiplicative’) ∪ FIRST(ε)
                       = {times} ∪ {divide} ∪ {integer-divide} ∪ {ε}

FIRST(Exponential) = FIRST(FIRST(Unary) ° FIRST(Exponential’))
                   = {plus, minus, real, variable, lbracket, lsq_bracket}

FIRST(Exponential’) = FIRST(pow Unary Exponential’) ∪ FIRST(ε)
                    = {pow} ∪ {ε}

FIRST(Unary) = FIRST(plus Primary) ∪ FIRST(minus Primary) ∪ FIRST(Primary)
             = {plus} ∪ {minus} ∪ {real, variable, lbracket, lsq_bracket}

FIRST(Primary) = FIRST(real) ∪ FIRST(variable) ∪ FIRST(lbracket Additive rbracket) ∪ FIRST(lsq_bracket Inner_List rsq_bracket)
               = {real} ∪ {variable} ∪ {lbracket} ∪ {lsq_bracket}

FIRST(Inner_List) = FIRST(FIRST(Inner_List’’) ° FIRST(Inner_List’’))
                  = {plus, minus, real, variable, lbracket, lsq_bracket}

FIRST(Inner_List’) = FIRST(comma Inner_List’’ Inner_List) ∪ FIRST(ε)
                   = {comma} ∪ {ε}

FIRST(Inner_List’’) = FIRST(Expression)
                    = {plus, minus, real, variable, lbracket, lsq_bracket}

FIRST(City) = FIRST(city variable block_start City’ block_end)
            = {city}

FIRST(City’) = FIRST(FIRST(City’’’) ° FIRST(City’’))
             = {name, road, const, type_number, type_string, type_coordinate, type_list, variable, print}

FIRST(City’’) = FIRST(FIRST(City’) ° FIRST(City’’)) ∪ FIRST(ε)
              = {name, road, const, type_number, type_string, type_coordinate, type_list, variable, print} ∪ ε

FIRST(City’’’) = FIRST(City_Constructs) ∪ FIRST(Declaration) ∪ FIRST(Assignment) ∪ FIRST(Print)
               = {name, road} ∪ {const, type_number, type_string, type_coordinate, type_list} ∪ {variable} ∪ {print}

FIRST(Print) = FIRST(FIRST(print) ° FIRST(lbracket) ° FIRST(Expression) ° FIRST(rbracket))
             = {print}

FIRST(City_Constructs) = FIRST(Restaurant) ∪ FIRST(Road)
                       = {name} ∪ {road}

FIRST(Restaurant) = FIRST(FIRST(Name) ° FIRST(Shape) ° FIRST(Marker) ° FIRST(Routes))
                  = {name}

FIRST(Name) = FIRST(name colon String)
            = {name}

FIRST(String) = FIRST(variable) ∪ FIRST(string)
              = {variable} ∪ {string}

FIRST(Shape) = FIRST(shape colon block_start Lines block_end)
             = {shape}

FIRST(Lines) = FIRST(FIRST(Line) ° FIRST(Line) ° FIRST(Line) ° FIRST(Line’))
             = {line}

FIRST(Line’) = FIRST(FIRST(Line) ° FIRST(Line’)) ∪ FIRST(ε)
             = {line} ∪ ε

FIRST(Line) = FIRST(line lsq_bracket Coord comma Coord rsq_bracket)
            = {line}

FIRST(Coord) = FIRST(variable) ∪ FIRST(lbracket Expression comma Expression rbracket)
             = {variable} ∪ {lbracket}

FIRST(Marker) = FIRST(Marker’) ∪ FIRST(ε)
              = {marker} ∪ ε

FIRST(Marker’) = FIRST(marker colon Point)
               = {marker}

FIRST(Point) = point lsq_bracket Coord rsq_bracket

FIRST(Routes) = FIRST(Routes’) ∪ FIRST(ε)
              = {routes} ∪ ε

FIRST(Routes’) = FIRST(routes colon lsq_bracket Roads rsq_bracket)
               = {routes}

/////////////////////////////////////Za to nisn ziher/////////////////////////////////////
FIRST(Roads) = FIRST(FIRST(Road) ° FIRST(Road’))
             = {road}

FIRST(Road’) = FIRST(comma Road Roads’) ∪ FIRST(ε)
             = {comma} ∪ ε

FIRST(Road) = FIRST(road variable block_start Name Road_Shapes block_end)
            = {road}

FIRST(Road_Shapes) = FIRST(shape colon block_start Road_Shapes’ Road_Shapes block_end)
                   = {shape}
FOLLOW(Road_Shapes) = FIRST(block_end . FOLLOW(Road_Shapes))
                    = {block_end}

FIRST(Road_Shapes’) = FIRST(FIRST(Road_Shape) ° FIRST(Road_Shapes’)) ∪ FIRST(ε)
                    = {shape} | {ε}
FOLLOW(Road_Shapes’) = FIRST(Road_Shapes ° FOLLOW(Road_Shapes))
                     = FIRST

FIRST(Road_Shape) = FIRST(Line) ∪ FIRST(Bend)
                  = {line} ∪ {bend}
FOLLOW(Road_Shape) = {ε}

FIRST(Bend) = FIRST(bend lsq_bracket Coord comma Coord comma Expression rsq_bracket)
            = {bend}
FOLLOW(Bend) = FIRST(ε ° FOLLOW(Road_Shape))
             = FOLLOW(Road_Shape)
             = {ε}

FIRST(For) = FIRST(foreach variable in Variable block_start Program block_end)
           = {foreach}
FOLLOW(For) = {ε}

FIRST(Variable) = FIRST(variable) ∪ FIRST(Radius)
                = {variable} ∪ {lsq_bracket}
FOLLOW(Variable) = FIRST(block_start ° FOLLOW(For))
                 = FOLLOW(For)
                 = {ε}

FIRST(Radius) = FIRST(lsq_bracket Coord comma Expression rsq_bracket)
              = {lsq_bracket}
FOLLOW(Radius) = FIRST(ε ° FOLLOW(Variable))
               = FOLLOW(Variable)
               = {ε}

FIRST(Program) = FIRST(FIRST(Program’’) ° FIRST(Program’))
               = {type_number, type_string, type_coordinate, type_list, variable, print, highlight}
FOLLOW(Program) = FIRST(block_end ° FOLLOW(For))
                = {block_end}

FIRST(Program’) = FIRST(FIRST(Program) ° FIRST(Program‘)) ∪ FIRST(ε)
                = {type_number, type_string, type_coordinate, type_list, variable, print, highlight} ∪ {ε}
FOLLOW(Program’) = FIRST(ε ° FOLLOW(PROGRAM))
                 = {block_end}

FIRST(Program’’) = FIRST(Declaration) ∪ FIRST(Assignment) ∪ FIRST(Print) ∪ FIRST(Highlight)
                 = {type_number, type_string, type_coordinate, type_list} ∪ {variable} ∪ {print} ∪ {highlight}
FOLLOW(Program’’) = FIRST(Program’’ ° FOLLOW(PROGRAM'))
                  = {type_number, type_string, type_coordinate, type_list, variable, print, highlight}

FIRST(Highlight) = FIRST(FIRST(highlight) ° FIRST(lbracket) ° FIRST(variable) ° FIRST(rbracket))
                 = {highlight}
FOLLOW(Highlight) = FIRST(ε ° FOLLOW(Program’’))
                  = FOLLOW(Program’’)
                  = {type_number, type_string, type_coordinate, type_list, variable, print, highlight}




 




const -> const
variable -> {A,…,Z,a,…,z}{A,…,Z,a,…,z,0,…,9}*
equals -> =
type_number -> num
type_string -> string
type_coordinate -> coord
type_list -> List
lthen -> <
mthen -> >
city -> city
block_start -> {
block_end -> }
name -> name
colon -> :
string -> “{A,…,Z,a,…,z,0,…,9}*” oz. ASCII
shape -> shape
line -> line
lsq_bracket -> [
comma -> ,
rsq_bracket -> ]
lbracket -> (
rbracket -> )
marker  -> marker
point-> point
routes-> routes
road-> road
bend-> bend
foreach-> foreach
highlight -> highlight

