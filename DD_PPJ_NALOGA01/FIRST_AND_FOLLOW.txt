FIRST AND FOLLOW za LL(1)



Main_Program ::= Main_Program’’ semicol Main_Program’
FIRST(Main_Program) = FIRST(FIRST(Main_Program’’) ° FIRST(semicol) ° FIRST(Main_Program’)) ✅
                    = {const, type_number, type_string, type_coordinate, type_list, hash, city, foreach} ✅
FOLLOW(Main_Program) = Ø ✅
FIRST ∩ FOLLOW = Ø

Main_Program’ ::= Main_Program Main_Program’ | ε
FIRST(Main_Program’) = FIRST(FIRST(Main_Program) ° FIRST(Main_Program’)) ∪ FIRST(ε) ✅
                     = {const, type_number, type_string, type_coordinate, type_list, hash, city, foreach} ∪ {ε} ✅
FOLLOW(Main_Program’) = FIRST(ε . FOLLOW(Main_Program’)) ∪ FIRST(ε . FOLLOW(Main_Program)) ✅
                      = 
FIRST ∩ FOLLOW = Ø

Main_Program’’ ::= Declaration | Assignment | City | For
FIRST(Main_Program’’) = FIRST(Declaration) ∪ FIRST(Assignment) ∪ FIRST(City) ∪ FIRST(For) ✅
                      = {const, type_number, type_string, type_coordinate, type_list} ∪ {hash} ∪ {city} ∪ {foreach} ✅
FOLLOW(Main_Program’’) = FIRST(semicol ° FOLLOW(Main_Program)) ✅
                       = {semicol} ✅
FIRST ∩ FOLLOW = Ø

Declaration ::= const Declaration’ | Declaration’
FIRST(Declaration) = FIRST(const Declaration’) ∪ FIRST(Declaration’) ✅
                   = {const} ∪ {type_number, type_string, type_coordinate, type_list} ✅
FOLLOW(Declaration) = FIRST(ε . FOLLOW(Main_Program’’))
                    = 
FIRST ∩ FOLLOW = Ø

Declaration’ ::= Type variable equals Expression
FIRST(Declaration’) = FIRST(FIRST(Type) ° FIRST(variable) ° FIRST(equals) ° FIRST(Expression)) ✅
                    = {type_number, type_string, type_coordinate, type_list} ✅
FOLLOW(Declaration’) = FIRST(ε . FOLLOW(Declaration)) ∪ FIRST(ε . FOLLOW(Declaration)) ✅
                     = 
FIRST ∩ FOLLOW = Ø

Assignment ::= hash variable equals Expression
FIRST(Assignment) = FIRST(FIRST(hash) ° FIRST(variable) ° FIRST(equals) ° FIRST(Expression)) ✅
                  = {hash} ✅
FOLLOW(Assignment) = FIRST(ε . FOLLOW(Program’’)) ∪ FIRST(ε . FOLLOW(City’’’)) ∪ FIRST(ε . FOLLOW(Main_Program’’)) ✅
                   = 
FIRST ∩ FOLLOW = Ø

Type ::= type_number | type_string | type_coordinate | type_list lthen Type mthen
FIRST(Type) = FIRST(type_number) ∪ FIRST(type_string) ∪ FIRST(type_coordinate) ∪ FIRST(type_list lthen Type mthen) ✅
            = {type_number} ∪ {type_string} ∪ {type_coordinate} ∪ {type_list} ✅
FOLLOW(Type) = FIRST(variable . FOLLOW(Declaration’)) ✅
             = {variable} ✅
FIRST ∩ FOLLOW = Ø

Expression ::= Additive
FIRST(Expression) = FIRST(Additive) ✅
                  = {plus, minus, real, variable, lbracket, lsq_bracket} ✅
FOLLOW(Expression) = FIRST(rsq_bracket . FOLLOW(Radius)) ∪ FIRST(Bend . FOLLOW(rsq_bracket)) ∪ FIRST(comma . FOLLOW(Coord)) ∪ FIRST(rbracket . FOLLOW(Coord)) ∪ FIRST(rbracket . FOLLOW(Print)) ∪ FIRST(ε . FOLLOW(Inner_List’’)) ∪ FIRST(ε . FOLLOW(Assignment)) ∪ FIRST(ε . FOLLOW(Declaration’)) ✅
                   = 
FIRST ∩ FOLLOW = Ø

Additive ::= Multiplicative Additive’
FIRST(Additive) = FIRST(FIRST(Multiplicative) ° FIRST(Additive’)) ✅
                = {plus, minus, real, variable, lbracket, lsq_bracket} ✅
FOLLOW(Additive) = FIRST(rbracket . FOLLOW(Primary)) ∪ FIRST(ε . FOLLOW(Expression))
                 = 
FIRST ∩ FOLLOW = Ø

Additive’ ::= plus Multiplicative Additive’ | minus Multiplicative Additive’ | ε
FIRST(Additive’) = FIRST(plus Multiplicative Additive’) ∪ FIRST(minus Multiplicative Additive’) ∪ FIRST(ε) ✅
                 = {plus} ∪ {minus} ∪ {ε} ✅
FOLLOW(Additive’) = FIRST(ε . FOLLOW(Additive’)) ∪ FIRST(ε . FOLLOW(Additive’)) ∪ FIRST(ε . FOLLOW(Additive)) ✅
                  = 
FIRST ∩ FOLLOW = Ø

Multiplicative ::= Exponential Multiplicative’
FIRST(Multiplicative) = FIRST(FIRST(Exponential) ° FIRST(Multiplicative’)) ✅
                      = {plus, minus, real, variable, lbracket, lsq_bracket} ✅
FOLLOW(Multiplicative) = FIRST(Additive’ . FOLLOW(Additive’)) ∪ FIRST(Additive’ . FOLLOW(Additive’)) ∪ (Additive’ . FOLLOW(Additive)) ✅
                       = 
FIRST ∩ FOLLOW = Ø

Multiplicative’ ::= times Exponential Multiplicative’ | divide Exponential Multiplicative’ | integer-divide Exponential Multiplicative’ | ε
FIRST(Multiplicative’) = FIRST(times Exponential Multiplicative’) ∪ FIRST(divide Exponential Multiplicative’) ∪ FIRST(integer-divide Exponential Multiplicative’) ∪ FIRST(ε) ✅
                       = {times} ∪ {divide} ∪ {integer-divide} ∪ {ε} ✅
FOLLOW(Multiplicative’) = FIRST(ε . FOLLOW(Multiplicative)) ✅
                        = 
FIRST ∩ FOLLOW = Ø

Exponential ::= Unary Exponential’
FIRST(Exponential) = FIRST(FIRST(Unary) ° FIRST(Exponential’)) ✅
                   = {plus, minus, real, variable, lbracket, lsq_bracket} ✅
FOLLOW(Exponential) = FIRST(Multiplicative’ . FOLLOW(Multiplicative)) ✅
                    = 
FIRST ∩ FOLLOW = Ø

Exponential’ ::= pow Unary Exponential’ | ε
FIRST(Exponential’) = FIRST(pow Unary Exponential’) ∪ FIRST(ε) ✅
                    = {pow} ∪ {ε} ✅
FOLLOW(Exponential’) = FIRST(Exponential’ . FOLLOW(Exponential’)) ∪ FIRST(Exponential’ . FOLLOW(Exponential)) ✅
                     = 
FIRST ∩ FOLLOW = Ø

Unary ::= plus Primary | minus Primary | Primary
FIRST(Unary) = FIRST(plus Primary) ∪ FIRST(minus Primary) ∪ FIRST(Primary) ✅
             = {plus} ∪ {minus} ∪ {real, variable, lbracket, lsq_bracket} ✅
FOLLOW(Unary) = FIRST(Exponential’ . FOLLOW(Exponential)) ∪ FIRST(Exponential’ . FOLLOW(Exponential’)) ✅
              = 
FIRST ∩ FOLLOW = Ø

Primary ::= real | variable | lbracket Additive rbracket | lsq_bracket Inner_List rsq_bracket
FIRST(Primary) = FIRST(real) ∪ FIRST(variable) ∪ FIRST(lbracket Additive rbracket) ∪ FIRST(lsq_bracket Inner_List rsq_bracket) ✅
               = {real} ∪ {variable} ∪ {lbracket} ∪ {lsq_bracket} ✅
FOLLOW(Primary) = FIRST(ε . FOLLOW(Unary)) ∪ FIRST(ε . FOLLOW(Unary)) ∪ FIRST(ε . FOLLOW(Unary)) ✅
                = 
FIRST ∩ FOLLOW = Ø

Inner_List ::= Inner_List’’ Inner_List’
FIRST(Inner_List) = FIRST(FIRST(Inner_List’’) ° FIRST(Inner_List’)) ✅
                  = {plus, minus, real, variable, lbracket, lsq_bracket} ✅
FOLLOW(Inner_List) = FIRST(rsq_bracket . FOLLOW(Primary)) ∪ FIRST(ε . FOLLOW(Inner_List’))🤔🤔🤔🤔🤔
                   = 
FIRST ∩ FOLLOW = Ø

Inner_List’ ::= comma Inner_List’’ Inner_List | ε
FIRST(Inner_List’) = FIRST(comma Inner_List’’ Inner_List) ∪ FIRST(ε) ✅
                   = {comma} ∪ {ε} ✅
FOLLOW(Inner_List’) = FIRST(ε . FOLLOW(Inner_List))🤔🤔🤔🤔🤔
                    = 
FIRST ∩ FOLLOW = Ø

Inner_List’’ ::= Expression
FIRST(Inner_List’’) = FIRST(Expression) ✅
                    = {plus, minus, real, variable, lbracket, lsq_bracket} ✅
FOLLOW(Inner_List’’) = FIRST(Inner_List’ . FOLLOW(Inner_List)) ∪ FIRST(Inner_List . FOLLOW(Inner_List’))
                     = 
FIRST ∩ FOLLOW = Ø

City ::= city variable block_start City’ block_end
FIRST(City) = FIRST(city variable block_start City’ block_end) ✅
            = {city} ✅
FOLLOW(City) = FIRST(ε . FOLLOW(Main_Program’’)) ✅
             = 
FIRST ∩ FOLLOW = Ø

City’ ::= City’’’ City’’
FIRST(City’) = FIRST(FIRST(City’’’) ° FIRST(City’’)) ✅
             = {name, road, const, type_number, type_string, type_coordinate, type_list, variable, print} ✅
FOLLOW(City’) = FIRST(block_end . FOLLOW(City)) ✅
              = {block_end} ✅
FIRST ∩ FOLLOW = Ø

City’’ ::= City’ City’’ | ε
FIRST(City’’) = FIRST(FIRST(City’) ° FIRST(City’’)) ∪ FIRST(ε) ✅
              = {name, road, const, type_number, type_string, type_coordinate, type_list, variable, print} ∪ {ε} ✅
FOLLOW(City’’) = FIRST(ε . FOLLOW(City’’)) ∪ FIRST(ε . FOLLOW(City’)) ✅
               = FIRST(ε . FOLLOW(City’)) ✅🤔
               = {block_end} ✅🤔//ker ne vem če je ta ko je en = znak nad tem prau
FIRST ∩ FOLLOW = Ø

City’’’ ::= City_Constructs | Declaration | Assignment | Print
FIRST(City’’’) = FIRST(City_Constructs) ∪ FIRST(Declaration) ∪ FIRST(Assignment) ∪ FIRST(Print) ✅
               = {name, road} ∪ {const, type_number, type_string, type_coordinate, type_list} ∪ {hash} ∪ {print} ✅
FOLLOW(City’’’) = FIRST(City’’ . FOLLOW(City’)) ✅
                = {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Print ::= print lbracket Expression rbracket
FIRST(Print) = FIRST(FIRST(print) ° FIRST(lbracket) ° FIRST(Expression) ° FIRST(rbracket)) ✅
             = {print} ✅
FOLLOW(Print) = FIRST( . FOLLOW())
              = 
FIRST ∩ FOLLOW = Ø

City_Constructs ::= Restaurant | Road
FIRST(City_Constructs) = FIRST(Restaurant) ∪ FIRST(Road) ✅
                       = {name} ∪ {road} ✅
FOLLOW(City_Constructs) = FIRST(ε . FOLLOW(City’’’)) ✅
                        = {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Restaurant ::= Name Shape Marker Routes
FIRST(Restaurant) = FIRST(FIRST(Name) ° FIRST(Shape) ° FIRST(Marker) ° FIRST(Routes)) ✅
                  = {name} ✅
FOLLOW(Restaurant) = FIRST(ε . FOLLOW(City_Constructs))
                   = {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Name ::= name colon String
FIRST(Name) = FIRST(name colon String) ✅
            = {name} ✅
FOLLOW(Name) = FIRST( . FOLLOW())
             = 
FIRST ∩ FOLLOW = Ø

String ::= variable | string
FIRST(String) = FIRST(variable) ∪ FIRST(string) ✅
              = {variable} ∪ {string} ✅
FOLLOW(String) = FIRST( . FOLLOW())
               = 
FIRST ∩ FOLLOW = Ø

Shape ::= shape colon block_start Lines block_end
FIRST(Shape) = FIRST(shape colon block_start Lines block_end) ✅
             = {shape} ✅
FOLLOW(Shape) = FIRST(Marker . FOLLOW(Restaurant)) ✅
              = {marker, block_end} ✅🤔 //ker nisn ziher če je City'' prav
FIRST ∩ FOLLOW = Ø

Lines ::= hash Line hash Line hash Line Line’
FIRST(Lines) = FIRST(FIRST(hash) ° FIRST(Line) ° FIRST(Line) ° FIRST(Line) ° FIRST(Line’)) ✅
             = {hash} ✅
FOLLOW(Lines) = FIRST(block_end . FOLLOW(Shape))
              = {block_end}
FIRST ∩ FOLLOW = Ø

Line’ ::= hash Line Line’ | ε 
FIRST(Line’) = FIRST(FIRST(Line) ° FIRST(Line’)) ∪ FIRST(ε) ✅
             = {line} ∪ {ε} ✅
FOLLOW(Line’) = FIRST(Line’ . FOLLOW(Line’)) ∪ FIRST(Line’ . FOLLOW(Lines))
              = {line} ∪ {line, block_end} 🤔
FIRST ∩ FOLLOW = Ø

Line ::= line lsq_bracket Coord comma Coord rsq_bracket
FIRST(Line) = FIRST(line lsq_bracket Coord comma Coord rsq_bracket) ✅
            = {line} ✅
FOLLOW(Line) = FIRST(Line . FOLLOW(Lines)) ∪ FIRST(Line . FOLLOW(Lines)) ∪ FIRST(Line' . FOLLOW(Lines)) 
                ∪ FIRST(Line' . FOLLOW(Line’)) ∪ FIRST(ε . FOLLOW(Road_Shape)) ✅
             = {line} ∪ {line, block_end} ∪
FIRST ∩ FOLLOW = Ø

Coord ::= variable | lbracket Expression comma Expression rbracket
FIRST(Coord) = FIRST(variable) ∪ FIRST(lbracket Expression comma Expression rbracket) ✅
             = {variable} ∪ {lbracket} ✅
FOLLOW(Coord) = FIRST(comma . FOLLOW(Line)) ∪ FIRST(rsq_bracket . FOLLOW(Line)) ∪ FIRST(rsq_bracket . FOLLOW(Point)) ∪ FIRST(comma . FOLLOW(Bend)) ∪ FIRST(comma . FOLLOW(Bend)) ∪ FIRST(comma . FOLLOW(Radius)) ✅
              = {comma} ∪ {rsq_bracket} ✅
FIRST ∩ FOLLOW = Ø

Marker ::= Marker’ | ε
FIRST(Marker) = FIRST(Marker’) ∪ FIRST(ε) ✅
              = {marker} ∪ {ε} ✅
FOLLOW(Marker) = FIRST(Routes . FOLLOW(Restaurant))
               = {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Marker’ ::= marker colon Point
FIRST(Marker’) = FIRST(marker colon Point) ✅
               = {marker} ✅
FOLLOW(Marker’) = FIRST(ε . FOLLOW(Marker))
                = {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Point ::= point lsq_bracket Coord rsq_bracket
FIRST(Point) = FIRST(point lsq_bracket Coord rsq_bracket)
             = {point} ✅
FOLLOW(Point) = FIRST(ε . FOLLOW(Marker’))
              = {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Routes ::= Routes’ | ε
FIRST(Routes) = FIRST(Routes’) ∪ FIRST(ε) ✅
              = {routes} ∪ {ε} ✅
FOLLOW(Routes) = FIRST(ε . FOLLOW(Restaurant)) ✅
               = {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Routes’ ::= routes colon lsq_bracket Roads rsq_bracket
FIRST(Routes’) = FIRST(routes colon lsq_bracket Roads rsq_bracket) ✅
               = {routes} ✅
FOLLOW(Routes’) = FIRST(ε . FOLLOW(Routes))
                = {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Roads ::= Road Road’
FIRST(Roads) = FIRST(FIRST(Road) ° FIRST(Road’)) ✅
             = {road} ✅
FOLLOW(Roads) = FIRST(rsq_bracket . FIRST(Routes’)) ✅
              = {rsq_bracket} ✅
FIRST ∩ FOLLOW = Ø

Road’ ::= comma Road Road’ | ε
FIRST(Road’) = FIRST(comma Road Road’) ∪ FIRST(ε) ✅
             = {comma} ∪ {ε} ✅
FOLLOW(Road’) = FIRST(ε . FOLLOW(Roads)) ∪ FIRST(ε . FOLLOW(Road’)) ✅🤔
              = FIRST(ε . FOLLOW(Roads)) ✅🤔
              = {rsq_bracket} ✅
FIRST ∩ FOLLOW = Ø

Road ::= road variable block_start Name Road_Shapes block_end
FIRST(Road) = FIRST(road variable block_start Name Road_Shapes block_end) ✅
            = {road} ✅
FOLLOW(Road) = FIRST(Road’ . FOLLOW(Road’)) ∪ FIRST(Road’ . FOLLOW(Roads)) ∪ FIRST(ε . FOLLOW(City_Constructs)) ✅
             = {comma, rsq_bracket} ∪ {block_end} ✅🤔//ker ne vem ce je City'' prav
FIRST ∩ FOLLOW = Ø

Road_Shapes ::= shape colon block_start  Road_Shapes’ Road_Shapes block_end
FIRST(Road_Shapes) = FIRST(shape colon block_start Road_Shapes’ Road_Shapes block_end) ✅
                   = {shape} ✅
FOLLOW(Road_Shapes) = FIRST(block_end . FOLLOW(Road_Shapes)) ∪ FIRST(block_end ° FOLLOW(Road)) ✅
                    = {block_end} ✅
FIRST ∩ FOLLOW = Ø

Road_Shapes’ ::= Road_Shape semicol Road_Shapes’ | ε 
FIRST(Road_Shapes’) = FIRST(FIRST(Road_Shape) ° FIRST(semicol) ° FIRST(Road_Shapes’)) ∪ FIRST(ε) ✅
                    = {line, bend} ∪ {ε} ✅
FOLLOW(Road_Shapes’) = FIRST(ε ° FOLLOW(Road_Shapes’)) ∪ FIRST(Road_Shapes ° FOLLOW(Road_Shapes)) ✅
                     = FIRST(Road_Shapes° FOLLOW(Road_Shapes)) 🤔
                     = {shape} ✅🤔
FIRST ∩ FOLLOW = Ø

Road_Shape ::= Line | Bend
FIRST(Road_Shape) = FIRST(Line) ∪ FIRST(Bend) ✅
                  = {line} ∪ {bend} ✅
FOLLOW(Road_Shape) = FIRST(semicol ° FOLLOW(Road_Shapes’)) ✅
                   = {semicol} ✅
FIRST ∩ FOLLOW = Ø

Bend ::= bend lsq_bracket Coord comma Coord comma Expression rsq_bracket
FIRST(Bend) = FIRST(bend lsq_bracket Coord comma Coord comma Expression rsq_bracket) ✅
            = {bend} ✅
FOLLOW(Bend) = FIRST(ε ° FOLLOW(Road_Shape)) = FOLLOW(Road_Shape) ✅ 
             = {semicol} ✅
FIRST ∩ FOLLOW = Ø

For ::= foreach variable in Variable block_start Program block_end
FIRST(For) = FIRST(foreach variable in Variable block_start Program block_end) ✅
           = {foreach} ✅
FOLLOW(For) = FIRST(ε ° FOLLOW(Main_Program’’)) = FOLLOW(Main_Program’’) ✅
            = {semicol} ✅
FIRST ∩ FOLLOW = Ø

Variable ::= variable | Radius 
FIRST(Variable) = FIRST(variable) ∪ FIRST(Radius) ✅
                = {variable} ∪ {lsq_bracket} ✅
FOLLOW(Variable) = FIRST(block_start ° FOLLOW(For)) ✅
                 = {block_start} ✅
FIRST ∩ FOLLOW = Ø

Radius ::= lsq_bracket Coord comma Expression rsq_bracket
FIRST(Radius) = FIRST(lsq_bracket Coord comma Expression rsq_bracket) ✅
              = {lsq_bracket} ✅
FOLLOW(Radius) = FIRST(ε ° FOLLOW(Variable)) = FOLLOW(Variable) ✅
               = {ε} ✅
FIRST ∩ FOLLOW = Ø

Program ::= Program’’ semicol Program’ 
FIRST(Program) = FIRST(FIRST(Program’’) ° FIRST(Program’)) ✅
               = {const, type_number, type_string, type_coordinate, type_list, variable, print, highlight} ✅
FOLLOW(Program) = FIRST(block_end ° FOLLOW(For)) ✅
                = {block_end} ✅
FIRST ∩ FOLLOW = Ø

Program’ ::= Program Program’ | ε 
FIRST(Program’) = FIRST(FIRST(Program) ° FIRST(Program’)) ∪ FIRST(ε) ✅
                = {const, type_number, type_string, type_coordinate, type_list, variable, print, highlight} ∪ {ε} ✅
FOLLOW(Program’) = FIRST(ε ° FOLLOW(Program’)) ∪ FIRST(ε ° FOLLOW(Program)) ✅
                 = {ε} ∪ {block_end} ✅
FIRST ∩ FOLLOW = Ø 🤔

Program’’ ::= Declaration | Assignment | Print | Highlight 
FIRST(Program’’) = FIRST(Declaration) ∪ FIRST(Assignment) ∪ FIRST(Print) ∪ FIRST(Highlight) ✅
                 = {const, type_number, type_string, type_coordinate, type_list} ∪ {hash} ∪ {print} ∪ {highlight} ✅
FOLLOW(Program’’) = FIRST(semicol ° FOLLOW(Program)) ✅
                  = {semicol} ✅
FIRST ∩ FOLLOW = Ø

Highlight ::= highlight lbracket variable rbracket 
FIRST(Highlight) = FIRST(FIRST(highlight) ° FIRST(lbracket) ° FIRST(variable) ° FIRST(rbracket)) ✅
                 = {highlight} ✅
FOLLOW(Highlight) = FIRST(ε ° FOLLOW(Program’’)) ✅
                  = {semicol} ✅
FIRST ∩ FOLLOW = Ø




















const -> const
variable -> {A,…,Z,a,…,z}{A,…,Z,a,…,z,0,…,9}*
equals -> =
type_number -> num
type_string -> string
type_coordinate -> coord
type_list -> List
lthen -> <
mthen -> >
city -> city
block_start -> {
block_end -> }
name -> name
colon -> :
string -> “{A,…,Z,a,…,z,0,…,9}*” oz. ASCII
shape -> shape
line -> line
lsq_bracket -> [
comma -> ,
rsq_bracket -> ]
lbracket -> (
rbracket -> )
marker  -> marker
point-> point
routes-> routes
road-> road
bend-> bend
foreach-> foreach
highlight -> highlight
semicol -> ;
hash -> #

