BNF: 
    Program ::= Program’ Program 
    Program' ::= Const Type
                | ε
    Const ::= const 
            | ε
    _____________________________
    

    Program = City Program
    City ::= city variable { InnerType }
           | ε
    InnerType ::= InnerType' InnerType
    InerType' ::= Type
                | Object
                | ForLoop
    Type ::= String
            | Coord
            | Number
            | ε
    String ::= string variable = " variable "
    Coord ::= coord variable = Dots
    Dots ::= ( Primary , Primary ) 
    Number ::= num variable = real
    Aditive ::= Multiplicative Additive'
    Aditive' ::= plus Multiplicative Additive'
              | minus Multiplicative Additive'
              | ε
    Multiplicative ::= Exponential Multiplicative'
    Multiplicative' ::= times Exponential Multiplicative'
                      | divide Exponential Multiplicative'
                      | intiger-divide Exponential Multiplicative'
                      | ε
    Exponential ::= Unary Exponential'
    Exponential' ::= pow Unary Exponential'
                   | ε
    Unary ::= plus Primary 
            | minus Primary 
            | Primary
    List ::= list < TypeName > = [ Primary Primary' ]
    Primary ::= real
              | variable
              | ( Aditive )
    Primary' ::= Primary
                | ε
    TypeName ::= string
              | coord
              | number
              | list
              | restaurant
    Object ::= Road
             | Restaurant
             | Radius
             | Marker
             | Line
             | ε
    Road ::= road variable { path ( Line, Primary ) Paths }
    Paths ::= path ( Line, Primary ) 
            | ε
    Line ::= line [ Dots, Dots ]
    Restaurant ::= restaurant variable { Name Shape Marker }
    Name ::= name : String'
    String' ::= " #string " 
              | variable
    Shape ::= { Line Line Line Line' }
    Line' ::= Line Line'
            | ε
    Marker ::= marker : Point
             | ε
    Point ::= point [ Dots ]
    Radius ::= radius variable = ( Dots , Primary )
    Marker ::= marker variable = Dots
    ForLoop ::= foreach variable in variable { highlight ( variable ) }
              | ε